#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift("#{File.dirname(__FILE__)}/../lib")

STDOUT.sync = true

require 'tunerlist/compact_disc_changer_emulator'
require 'ruby-mpd'

class MPCDC < TunerList::CompactDiscChangerEmulator
  def initialize(port)
    super(port)

    @mpd_status = MPD.new 'localhost', 6600, callbacks: true
    @mpd_status.connect

    @mpd = MPD.new 'localhost', 6600
    @mpd.connect

    @mpd.repeat = true

    setup_mpd_status_callbacks
  end

  def process_random(payload)
    random = payload[0] == TunerList::RandomStatus::ON
    process_start_play(nil) if payload[0] == TunerList::RandomStatus::START
    @mpd.random = random
    @random_status = payload[0]
  end

  def process_next_track(_payload)
    @mpd.next unless @mpd_state == :stop
    self.track_number = track_number + 1
  end

  def process_prev_track(_payload)
    @mpd.previous unless @mpd_state == :stop
    self.track_number = track_number - 1
  end

  def process_start_play(_payload)
    @mpd.play
    self.cd_state = TunerList::CD::PLAYING
  end

  def process_pause(_payload)
    @mpd.pause = true
    self.cd_state = TunerList::CD::PAUSED
  end

  def process_stop_play(_payload)
    @mpd.stop
  end

  def process_fast_fwd(_payload)
    @mpd.seek('+20')
    self.cd_state = TunerList::CD::CUEING_FWD
  end

  def process_fast_rew(_payload)
    @mpd.seek('-20')
    self.cd_state = TunerList::CD::REWINDING
  end

  def process_load_cd(payload)
    puts @mpd.playlists
    playlist = @mpd.playlists[payload[0] - 1]
    unless playlist.nil?
      puts @mpd.queue.count
      @mpd.clear
      puts @mpd.queue.count
      playlist.load
      @playlist_id = payload[0]
    end
    self.cd_number = @playlist_id
  end

  def reset
    @mpd.pause = true
  end

  def setup_mpd_status_callbacks
    @mpd_status.on :state do |status|
      puts status

      @mpd_state = status
      map = {
        play: TunerList::CD::PLAYING,
        stop: TunerList::CD::LOADING_TRACK, # FIXME
        pause: TunerList::CD::PAUSED,
      }
      cd_status = map[status]
      puts cd_status
      self.cd_state = cd_status unless cd_status.nil?
    end

    @mpd_status.on :song do |song|
      puts song
      self.track_number = song.pos + 1 unless song.nil?
    end
  end
end

port = ARGV.shift || 'ttyHU'

system "/bin/stty -F #{port} parenb -ixon"

cdc = MPCDC.new port
cdc.run
